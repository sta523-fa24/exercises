[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\n\npalette = c(Green = \"#7fc97f\", Purple = \"#beaed4\", Orange = \"#dfc086\")\n\nui = page_sidebar(\n  #theme = bs_theme() |>\n  #  bs_theme_update(primary = \"#DB477D\", base_font = \"ComicSansMS\"),\n  title = \"Beta-Binomial\",\n  sidebar = sidebar(\n    h4(\"Data:\"),\n    sliderInput(\n      inputId = \"x\", label = \"# of heads\",\n      min = 0, max = 100, value = 7  \n    ),\n    sliderInput(\n      inputId = \"n\", label = \"# of flips\",\n      min = 0, max = 100, value = 10  \n    ),\n    h4(\"Prior:\"),\n    numericInput(\n      inputId = \"a\", label = \"Prior # of heads\",\n      min=0, value=5\n    ),\n    numericInput(\n      inputId = \"b\", label = \"Prior # of tails\",\n      min=0, value=5\n    ),\n    h4(\"Options:\"),\n    checkboxInput(inputId = \"options\", label = \"Show options\", value = FALSE),\n    conditionalPanel(\n      \"input.options == true\",\n      selectInput(\n        inputId = \"prior\", label = \"Color of prior distribution\", \n        choices = palette, selected = palette[1]\n      ),\n      selectInput(\n        inputId = \"likelihood\", label = \"Color of likelihood distribution\", \n        choices = palette, selected = palette[2]\n      ),\n      selectInput(\n        inputId = \"posterior\", label = \"Color of posterior distribution\", \n        choices = palette, selected = palette[3]\n      )\n    )\n    \n  ),\n  \n  \n  navset_card_pill(\n    nav_panel(\n      title = \"Plot\",\n      card(\n        card_header(\n          \"Density plot\",\n          class = \"bg-primary\"\n        ),\n        card_body(\n          plotOutput(outputId = \"plot\")\n        )\n      ),\n    ),\n    \n    nav_panel(\n      title = \"Table\",\n      card(\n        card_header(\n          \"Density plot\",\n          class = \"bg-primary\"\n        ),\n        card_body(\n          tableOutput(outputId = \"table\")\n        )\n      )\n    )\n  )\n)\n\nserver = function(input, output, session) {\n  #bs_themer()\n  \n  \n  observe({ # Selected a new prior color\n    choices = c(input$prior, input$likelihood, input$posterior)\n    if (input$prior == input$likelihood) {\n      updateSelectInput(inputId = \"likelihood\", select = setdiff(palette, choices))\n    } else if (input$prior == input$posterior) {\n      updateSelectInput(inputId = \"posterior\", select = setdiff(palette, choices))\n    }\n  }) |>\n    bindEvent(input$prior)\n  \n  \n  observe({ # Selected a new likelihood color\n    choices = c(input$prior, input$likelihood, input$posterior)\n    if (input$prior == input$likelihood) {\n      updateSelectInput(inputId = \"prior\", select = setdiff(palette, choices))\n    } else if (input$likelihood == input$posterior) {\n      updateSelectInput(inputId = \"posterior\", select = setdiff(palette, choices))\n    }\n  }) |>\n    bindEvent(input$likelihood)\n  \n  observe({ # Selected a new posterior color\n    choices = c(input$prior, input$likelihood, input$posterior)\n    if (input$posterior == input$likelihood) {\n      updateSelectInput(inputId = \"likelihood\", select = setdiff(palette, choices))\n    } else if (input$prior == input$posterior) {\n      updateSelectInput(inputId = \"prior\", select = setdiff(palette, choices))\n    }\n  }) |>\n    bindEvent(input$posterior)\n  \n  \n  observe({\n    updateSliderInput(inputId = \"x\", max = input$n)\n  })\n  \n  d = reactive({\n    validate(\n      need(input$a >= 0, \"Number of prior heads needs to be 0 or greater\"),\n      need(input$b >= 0, \"Number of prior tails needs to be 0 or greater\")\n    )\n    d = tibble(\n      p = seq(0, 1, length.out = 1001) \n    ) |>\n      mutate(\n        prior = dbeta(p, input$a, input$b),\n        likelihood = dbinom(x = input$x, size = input$n, prob = p) |>\n          (\\(x) {x/ (sum(x) / n())})(),\n        posterior = dbeta(p, input$x + input$a, input$n - input$x + input$b)\n      ) |>\n      pivot_longer(\n        cols = -p,\n        names_to = \"distribution\", values_to = \"density\"\n      ) |>\n      mutate(\n        distribution = forcats::as_factor(distribution)\n      )\n    \n    #print(d)\n    \n    d\n  })\n  \n  output$plot = renderPlot({\n    \n    message(\"Drawing plot!\")\n    \n    choices = c(input$prior, input$likelihood, input$posterior)\n    \n    ggplot(d(), aes(x=p, y=density, color = distribution)) +\n      geom_line(size=1.5) +\n      geom_ribbon(aes(ymax=density, fill=distribution), ymin=0, alpha=0.5) +\n      scale_color_manual(values = choices) +\n      scale_fill_manual(values = choices)\n  })\n  \n  output$table = renderTable({\n    \n    message(\"Building table!\")\n    \n    d() |>\n      group_by(distribution) |>\n      summarize(\n        mean = sum(p*density) / n(),\n        median = p[(cumsum(density/n())) >= 0.5][1],\n        q025 = p[(cumsum(density/n())) >= 0.025][1],\n        q975 = p[(cumsum(density/n())) >= 0.975][1],\n      )\n  })\n}\n\n\n#thematic::thematic_shiny()\nshinyApp(ui = ui, server = server)\n","type":"text"}]
